@page "/Charts"
@inject IRequisitionService requisitionService
@using System.Globalization
@using Microsoft.EntityFrameworkCore

<RadzenCard>
    <div class="row">
        <div class="col-md-6 col-sm-12 col-xs-12">
            <MatSelect Label="Velg Periode" @bind-Value="@PeriodId">
                @foreach (var item in selectOptions)
                    {
                    <MatOption Value="@item.Id">@item.Name</MatOption>
                    }
            </MatSelect>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-sm-12">
            @if (reqCount == null && reqCountDate == null)
            {
                <MatProgressCircle Indeterminate="true" FourColored="true" />
            }
            else
            {
                if (dateType == 0)
                {
                    <RadzenChart @ref="reqChart">
                        <RadzenColumnSeries Stroke="#bbdefb" Fill="#455a64" Data="@reqCountDate" CategoryProperty="Label" Title="Rekvisisjoner" ValueProperty="Count" />
                        <RadzenColumnOptions Radius="2" />
                        <RadzenCategoryAxis FormatString="{0:dd MMM}" Padding="50" />
                        <RadzenColumnOptions Margin="10" />
                        <RadzenLegend Visible="false" />
                    </RadzenChart>
                }
                else
                {
                    <RadzenChart @ref="reqChart">
                        <RadzenColumnSeries Stroke="#bbdefb" Fill="#455a64" Data="@reqCount" CategoryProperty="Label" Title="Rekvisisjoner" ValueProperty="Count" />
                        <RadzenColumnOptions Radius="2" />
                        <RadzenCategoryAxis Padding="50" />
                        <RadzenColumnOptions Margin="10" />
                        <RadzenLegend Visible="false" />
                    </RadzenChart>
                }
            }

        </div>
    </div>
</RadzenCard>

@code {
    RadzenChart reqChart;
    public int? ItemId = null;
    public string formatString;
    public int dateType = 0;
    public int PeriodId
    {
        set
        {
            ItemId = (value == 0 ? (int?)null : value);
            Load();
        }
        get
        {
            return (ItemId == null ? 0 : ItemId.Value);
        }
    }

    public List<(int Id, string Name)> selectOptions =
       new List<(int Id, string Name)>{
           (0, "Dager"),
           (1, "Uker"),
           (2, "Måneder"),
           (3, "År"),
               };

    List<Requisition> requisitions;
    List<DataItem> reqCount;
    List<DataItem2> reqCountDate;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            requisitions = await requisitionService.ListAll();
            dateType = 0;
            var reqByDate = requisitions
                .GroupBy(s => s.RequisitionCreatedTime)
                .Select(g => new { Date = g.Key, Count = g.Select(l => l.Id).Distinct().Count() });

            reqCountDate = new List<DataItem2>();

            foreach (var req in reqByDate)
            {
                var date = $"{ req.Date.Month }/{ req.Date.Day }";

                reqCountDate.Add(new DataItem2
                {
                    Label = req.Date,
                    Count = req.Count
                });
            }
            formatString = "{0: dd.MM}";
            reqCountDate.ToArray();
            StateHasChanged();
        }

    }

    void Load()
    {
        switch (PeriodId)
        {
            case 1:
                LoadWeekly();
                break;
            case 2:
                LoadMonthly();
                break;
            case 0:
                LoadDaily();
                break;
            default:
                LoadAll();
                break;
        }
    }

    void LoadDaily()
    {
        dateType = 0;
        var reqByDay = requisitions
        .GroupBy(s => s.RequisitionCreatedTime)
        .Select(g => new { Date = g.Key, Count = g.Select(l => l.Id)
        .Distinct()
        .Count() });
        if (reqCountDate != null)
        {
            reqCountDate.Clear();
            reqCountDate.ToList();
        }
        else
        {
            reqCountDate = new List<DataItem2>();
        }
        foreach (var req in reqByDay)
        {
            var date = $"{ req.Date.Month }/{ req.Date.Day }";

            reqCountDate.Add(new DataItem2
            {
                Label = req.Date,
                Count = req.Count
            });
        }

        reqCountDate.ToArray();
        reqChart.Reload();
    }

    void LoadWeekly()
    {
        dateType = 1;
        var reqByWeek = requisitions
        //.GroupBy(i => i.RequisitionCreatedTime.)
        .GroupBy(i => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(i.RequisitionCreatedTime, CalendarWeekRule.FirstDay, DayOfWeek.Monday))
        .Select(g => new { Week = g.Key, Count = g.Select(l => l.Id)
        .Distinct()
        .Count() });
        if (reqCount != null)
        {
            reqCount.Clear();
            reqCount.ToList();
        }
        else
        {
            reqCount = new List<DataItem>();
        }
        foreach (var req in reqByWeek)
        {
            reqCount.Add(new DataItem
            {
                Label = req.Week.ToString(),
                Count = req.Count
            });
        }

        reqCount.ToArray();
        reqChart.Reload();
    }
    void LoadMonthly()
    {
        dateType = 1;
        var reqByMonth = requisitions.GroupBy(s => new { s.RequisitionCreatedTime.Year, s.RequisitionCreatedTime.Month }).Select(g => new { Month = g.Key, Count = g.Select(l => l.Id).Distinct().Count() });
        if (reqCount != null)
        {
            reqCount.Clear();
            reqCount.ToList();
        }
        else
        {
            reqCount = new List<DataItem>();
        }
        foreach (var req in reqByMonth)
        {
            reqCount.Add(new DataItem
            {
                Label = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(req.Month.Month),
                Count = req.Count
            });
        }

        reqCount.ToArray();
        reqChart.Reload();
    }

    void LoadAll()
    {
        dateType = 1;
        var reqByYear = requisitions.GroupBy(s => s.RequisitionCreatedTime.Year).Select(g => new { Year = g.Key, Count = g.Count() });
        if (reqCount != null)
        {
            reqCount.Clear();
            reqCount.ToList();
        }

        reqCount.Add(new DataItem
        {
            Label = "2019",
            Count = 0
        });
        foreach (var req in reqByYear)
        {
            reqCount.Add(new DataItem
            {
                Label = req.Year.ToString(),
                Count = req.Count
            });
        }

        reqCount.ToArray();
        reqChart.Reload();
    }

    public class DataItem
    {
        public string Label { get; set; }
        public int Count { get; set; }
    }
    public class DataItem2
    {
        public DateTime Label { get; set; }
        public int Count { get; set; }
    }
}
